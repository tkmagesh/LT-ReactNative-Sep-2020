Maintainbility
    Fix Bugs
    Add new features
    Remove dead features
    optimize the existing functionality

Maintainable == changeable == Easy to change

ES6 (ECMAScript6 / ESNext / ES2015 )
1. let
2. const
3. Array destructuring
4. Rest operator (Array)
5. Spread operator (Array)
6. Object destructuring
7. Rest operator (Object)
8. Spread operator (Object)
9. default arguments
10. arrow functions
11. template strings
12. class

http://es6-features.org/

Advanced JavaScript Videos - http://bit.ly/javascript-training-videos


When a function is invoked as a method of an object
    this -> object

When a function is invoked as a function
    this -> global (window)


Component Life Cycle Stages
    Mouting
        componentWillMount
        componentDidMount
    Updating
        componentShouldUpdate
        componentWillUpdate
        render
    Unmounting
        componentWillUnmount

If a component doesnt have any state or lifecycle events

React Hooks
    functions with name starting with 'use'
    Built in hooks
        useState
        useEffect
        useReducer
        useMemo
        useRef

React Native
    Framework for building Native applications using react

Mobile Applications
    Native applications
        Android - Java, Kotlin
        ios - Objective-C, Cwift

    Adaptive Web Applications
        Application on the Browser
            UI
            Not possible to access device native featues

    Hybrid Mobile Applications
        Applications built for the browser
        Wrap the browser in a native application
            Phone-Gap
            Cordova
            Capacitor
            IONIC

    React Native
        Build the application using React

        Components
        Layout
        Navigate
        Server communicate
        Platform APIs
        Package & Deployment


node.js
Android Developer Studio
XCode

node --version

npm, yarn
    package managers for node

To install yarn
    npm install yarn -g


sudo npm install expo-cli -g
    OR
yard add global expo-cli

JavaScript module System
    1. ES6 modules
    2. CommonJS modules
    3. AMD (Asynchronous Module Definition)

ES6 Modules
    Everything defined in a JavaScript file is considered private
        If anything need to be made public, it has to be explicitly 'exported'
        If anything needed from other modules, they have to explicitly 'imported'

Navigation

    Tab Navigation
    Drawer Navigation
    Stack Navigation


Synchronous
    Blocking
    Wait for the operation to complete

Asynchronous operations
    Non Blocking
    Dont wait for the operation to complete


JSON-SERVER
    Expose the data from a json file as a restful endpoint


JSON-SERVER
    npm install json-server -g OR yarn add globl json-server
    json-server db.json

    OR

    npx json-server db.json


Flux
    Redux
        Store
            Application State
            
            - getState() returns the application state
            - subscribe(callback) -> callback will be invoked whenever there is a state change 
            - dispatch (action) 

        Reducer is a function ( currentState, action)
            => newState / currentState

        action -> { type : '', payload : }


State
    UI State ( Component )
    Intermediate State ( Component )

    Application State ( Redux Store)


Middleware
    Any operation that we want to perform whenever an action is dispatched
    

Sync action creator
    return the action object with the data

async action creator
    return a function which is expected to be invoked with dispatch


Create a context

const AppContext = REact.createContext();

<View>
    <AppContext.Provider myData={100}>
        <A>
            <B>
                <C>
                    <AppContext.Consumer>
                        {context => }
                    </AppContext.Consumer>
                </C>
            </B>
        </A>
    </AppContext.Provider>
</View>


Within the component
    - Using useState hook
    
Outside the view (Redux Store)
    - Using Redux

Within the View but across components (without using props)
    - Using the React Context